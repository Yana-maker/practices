dict_tasks = [
    {'title': 'HW', 'desc': 'Physics + Math', 'urgency': 5},
    {'title': 'Laundry', 'desc': 'Wash clothes', 'urgency': 1},
    {'title': 'Museum', 'desc': 'Egyptian things', 'urgency': 4}
]

list_tasks = ['HW', 'Physics + Math', 5]
tuple_tasks = ('HW', 'Physics + Math', 5)

'''
у каждого типа есть недоставки , листы например, изменяемы, что может привести
к случайным модификациям
также листы используются для хранения однородных данных,

Кортежи (tuple) - неизменяемы. но для получения атрибута приходится прибегать к 
распаковке либо индексированию

По сравнению с листами и кортежами словари предоставляют метоинформацию т.к.
клчюи сообщают смысл данных.
Но для получения атрибута необходимо использовать соот-ие ключи, если допустить 
ошибку в названии ключа, произойдет ошибка KeyError или SyntaxError.

списки и кортежи и словари являются общими типами, и они не связаны со знанием о
специфике модели данных
Современные среды интегрированной разработки (IDE) pycharm, Visual studio code, 
не предоставляют полезных подсказок автозаполнения для таких структур данных.

Для решения таких проблем существуют КЛАССЫ, IDE автоматически откроет список 
доступных методов атрибутов

минус класса - затраты памяти , особенно если экземпляров много 
'''


class Task:
    def __init__(self, title, desc, urgency):
        self.title = title
        self.desc = desc
        self.urgency = urgency


class_task = Task('Laundry', 'Wash clothes', 2)

print(class_task.title)
print(class_task.desc)
print(class_task.urgency)
